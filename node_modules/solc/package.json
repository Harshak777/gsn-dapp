{
  "_args": [
    [
      {
        "raw": "solc@0.5.0",
        "scope": null,
        "escapedName": "solc",
        "name": "solc",
        "rawSpec": "0.5.0",
        "spec": "0.5.0",
        "type": "version"
      },
      "C:\\Users\\Harshak-PC\\Documents\\GitHub\\gsn-dapp"
    ]
  ],
  "_from": "solc@0.5.0",
  "_hasShrinkwrap": false,
  "_id": "solc@0.5.0",
  "_location": "/solc",
  "_nodeVersion": "9.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/solc_0.5.0_1542151699038_0.053359921258387955"
  },
  "_npmUser": {
    "name": "chriseth",
    "email": "chris@ethereum.org"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "bindings": "1.5.0",
    "graceful-fs": "4.2.3",
    "inherits": "2.0.4",
    "klaw": "1.3.1",
    "nan": "2.14.0",
    "path-is-absolute": "1.0.1",
    "rimraf": "2.7.1",
    "safe-buffer": "5.2.0"
  },
  "_requested": {
    "raw": "solc@0.5.0",
    "scope": null,
    "escapedName": "solc",
    "name": "solc",
    "rawSpec": "0.5.0",
    "spec": "0.5.0",
    "type": "version"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/solc/-/solc-0.5.0.tgz",
  "_shasum": "2deb2ae992acac3afb909f85c38d00f01dcb335e",
  "_shrinkwrap": null,
  "_spec": "solc@0.5.0",
  "_where": "C:\\Users\\Harshak-PC\\Documents\\GitHub\\gsn-dapp",
  "author": {
    "name": "chriseth"
  },
  "bin": {
    "solcjs": "solcjs"
  },
  "bugs": {
    "url": "https://github.com/ethereum/solc-js/issues"
  },
  "dependencies": {
    "fs-extra": "^0.30.0",
    "keccak": "^1.0.2",
    "memorystream": "^0.3.1",
    "require-from-string": "^2.0.0",
    "semver": "^5.5.0",
    "yargs": "^11.0.0"
  },
  "description": "Solidity compiler",
  "devDependencies": {
    "coveralls": "^3.0.0",
    "ethereumjs-util": "^5.2.0",
    "istanbul": "^0.4.5",
    "semistandard": "^12.0.0",
    "tape": "^4.9.1",
    "tape-spawn": "^1.4.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-mdLHDl9WeYrN+FIKcMc9PlPfnA9DG9ur5QpCDKcv6VC4RINAsTF4EMuXMZMKoQTvZhtLyJIVH/BZ+KU830Z8Xg==",
    "shasum": "2deb2ae992acac3afb909f85c38d00f01dcb335e",
    "tarball": "https://registry.npmjs.org/solc/-/solc-0.5.0.tgz",
    "fileCount": 10,
    "unpackedSize": 8531146,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb614UCRA9TVsSAnZWagAApAMP/izZhCyhRFwDcMErrHYr\nOKFcrHJyNUA066fnJhWBznGJqqPTR7LtIgMG2Ki3YWk/yU4bwaqWo95th2I5\nn+53LKbL/uprtsClXyak6N2G3pAci9ekCDpkWNW3fx8wJDUPpvVAtqCcEjLP\nDjvJPlrcwCtqPNyeyHjk0x3SOb2MAyRuaIeNuWKdPzQaWbQzAF+EtzipgnLo\n2UJQsFRBc/20XPV63u5otkbLDbYgx4LrGstR5DWK7xY3IDuE2aKG4Xv1V/Xa\noTKCSZWhDTvmawF3uLW3WS0Yh9IkeFHVkk3T0xmCBG8GplvCYIxWP4NwyOGy\nBp4z3oZOUfNhSrluxM3QZkhWr7H5StBpar9fyDKKz5MGLwnkuve5eJjepcK/\ngmUNe/dG8e21tseyKayJQ/OXOKoTUj0NmiaIw28UK4s2eh+yJ977YWU/povs\nJhlSiqgBfeSXTdsvZFJN/M7SkYN7adXeP086Ce+Z+cIUlANtJr8YbwJi6LWa\nJd4y7Am92IFzUQZR4qrRT7HlTDLqk9lT63IWY62+Cwf43AneB1VN8cErUW4g\n3bk1hBRZFAvEzSKYpWsduRGVTzGAiW6ZI9MkvAHsCZFHS/noH9SfRhoCWnIe\ne5Cn+5Z5CR3bDFvaGSJw3O1PZyRlWa4rEZ3GBHOk3xGQrf0kwUuFp+Avlz0x\njXuK\r\n=f8Os\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "abi.js",
    "index.js",
    "linker.js",
    "solcjs",
    "soljson.js",
    "translate.js",
    "wrapper.js"
  ],
  "gitHead": "f617301dd74a3f891c2f196b1b48594bcc7153a4",
  "homepage": "https://github.com/ethereum/solc-js#readme",
  "keywords": [
    "ethereum",
    "solidity",
    "compiler"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "chriseth",
      "email": "c@ethdev.com"
    },
    {
      "name": "d11e9",
      "email": "d11e9@turkd.net"
    }
  ],
  "name": "solc",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://img.shields.io/travis/ethereum/solc-js.svg?branch=master&style=flat-square)](https://travis-ci.org/ethereum/solc-js)\n[![CircleCI](https://img.shields.io/circleci/project/github/ethereum/solc-js/master.svg?style=flat-square)](https://circleci.com/gh/ethereum/solc-js/tree/master)\n[![Coverage Status](https://img.shields.io/coveralls/ethereum/solc-js.svg?style=flat-square)](https://coveralls.io/r/ethereum/solc-js)\n\n# solc-js\nJavaScript bindings for the [Solidity compiler](https://github.com/ethereum/solidity).\n\nUses the Emscripten compiled Solidity found in the [solc-bin repository](https://github.com/ethereum/solc-bin).\n\n## Node.js Usage\n\nTo use the latest stable version of the Solidity compiler via Node.js you can install it via npm:\n\n```bash\nnpm install solc\n```\n\n### Usage on the Command-Line\n\nIf this package is installed globally (`npm install -g solc`), a command-line tool called `solcjs` will be available.\n\nTo see all the supported features, execute:\n\n```bash\nsolcjs --help\n```\n\nNote: this commandline interface is not compatible with `solc` provided by the Solidity compiler package and thus cannot be\nused in combination with an Ethereum client via the `eth.compile.solidity()` RPC method. Please refer to the\n[Solidity compiler documentation](https://solidity.readthedocs.io/) for instructions to install `solc`.\n\n### Usage in Projects\n\n#### From early versions\n\nIt can also be included and used in other projects:\n\n```javascript\nvar solc = require('solc')\nvar input = 'contract x { function g() {} }'\n// Setting 1 as second paramateractivates the optimiser\nvar output = solc.compile(input, 1)\nfor (var contractName in output.contracts) {\n\t// code and ABI that are needed by web3\n\tconsole.log(contractName + ': ' + output.contracts[contractName].bytecode)\n\tconsole.log(contractName + '; ' + JSON.parse(output.contracts[contractName].interface))\n}\n```\n\n#### From version 0.1.6\n\n**Not available since 0.5.0**\n\nStarting from version 0.1.6, multiple files are supported with automatic import resolution by the compiler as follows:\n\n```javascript\nvar solc = require('solc')\nvar input = {\n\t'lib.sol': 'library L { function f() returns (uint) { return 7; } }',\n\t'cont.sol': 'import \"lib.sol\"; contract x { function g() { L.f(); } }'\n}\nvar output = solc.compile({ sources: input }, 1)\nfor (var contractName in output.contracts)\n\tconsole.log(contractName + ': ' + output.contracts[contractName].bytecode)\n```\n\nNote that all input files that are imported have to be supplied, the compiler will not load any additional files on its own.\n\n#### From version 0.2.1\n\n**Not available since 0.5.0**\n\nStarting from version 0.2.1, a callback is supported to resolve missing imports as follows:\n\n```javascript\nvar solc = require('solc')\nvar input = {\n\t'cont.sol': 'import \"lib.sol\"; contract x { function g() { L.f(); } }'\n}\nfunction findImports (path) {\n\tif (path === 'lib.sol')\n\t\treturn { contents: 'library L { function f() returns (uint) { return 7; } }' }\n\telse\n\t\treturn { error: 'File not found' }\n}\nvar output = solc.compile({ sources: input }, 1, findImports)\nfor (var contractName in output.contracts)\n\tconsole.log(contractName + ': ' + output.contracts[contractName].bytecode)\n```\n\nThe `compile()` method always returns an object, which can contain `errors`, `sources` and `contracts` fields. `errors` is a list of error mesages.\n\n#### From version 0.4.11\n\nStarting from version 0.4.11 there is a new entry point named `compileStandardWrapper()` which supports Solidity's [standard JSON input and output](https://solidity.readthedocs.io/en/develop/using-the-compiler.html#compiler-input-and-output-json-description). It also maps old compiler output to it.\n\n```javascript\nvar solc = require('solc')\n\n// 'input' is a JSON string corresponding to the \"standard JSON input\" as described in the link above\n// 'findImports' works as described above\nvar output = solc.compileStandardWrapper(input, findImports)\n// Ouput is a JSON string corresponding to the \"standard JSON output\"\n```\n\nThere is also a direct method, `compileStandard`, which is only present on recent compilers and works the same way. `compileStandardWrapper` is preferred however because it provides the same interface for old compilers.\n\n#### From version 0.4.20\n\nStarting from version 0.4.20 a Semver compatible version number can be retrieved on every compiler release, including old ones, using the `semver()` method.\n\n#### From version 0.5.0\n\nStarting from version 0.5.0, `compile`, `compileStandard` and `compileStandardWrapper` all do the same thing - what `compileStandardWrapper` used to do.\n\n*Note*: with 0.5.1, `compileStandard` and `compileStandardWrapper` will be removed.\n\nStarting from version 0.5.0 the low-level functions are also exposed:\n- `solc.lowlevel.compileSingle`: the original entry point, supports only a single file\n- `solc.lowlevel.compileMulti`: this supports multiple files, introduced in 0.1.6\n- `solc.lowlevel.compileCallback`: this supports callbacks, introduced in 0.2.1\n- `solc.lowlevel.compileStandard`: this supports the Standard JSON input and output interface, introduced in 0.4.11\n\nExample:\n```javascript\nvar solc = require('solc')\nvar input = {\n\t'lib.sol': 'library L { function f() returns (uint) { return 7; } }',\n\t'cont.sol': 'import \"lib.sol\"; contract x { function g() { L.f(); } }'\n}\nvar output = JSON.parse(solc.lowlevel.compileMulti(JSON.stringify({ sources: input }), 1))\nfor (var contractName in output.contracts)\n\tconsole.log(contractName + ': ' + output.contracts[contractName].bytecode)\n```\n\n### Using with Electron\n\n**Note:**\nIf you are using Electron, `nodeIntegration` is on for `BrowserWindow` by default. If it is on, Electron will provide a `require` method which will not behave as expected and this may cause calls, such as `require('solc')`, to fail.\n\nTo turn off `nodeIntegration`, use the following:\n\n```javascript\nnew BrowserWindow({\n\twebPreferences: {\n\t\tnodeIntegration: false\n\t}\n})\n```\n\n### Using a Legacy Version\n\nIn order to compile contracts using a specific version of Solidity, the `solc.loadRemoteVersion(version, callback)` method is available. This returns a new `solc` object that uses a version of the compiler specified. \n\nYou can also load the \"binary\" manually and use `setupMethods` to create the familiar wrapper functions described above:\n`var solc = solc.setupMethods(require(\"/my/local/soljson.js\"))`.\n\n### Using the Latest Development Snapshot\n\nBy default, the npm version is only created for releases. This prevents people from deploying contracts with non-release versions because they are less stable and harder to verify. If you would like to use the latest development snapshot (at your own risk!), you may use the following example code.\n\n```javascript\nvar solc = require('solc')\n\n// getting the development snapshot\nsolc.loadRemoteVersion('latest', function (err, solcSnapshot) {\n\tif (err) {\n\t\t// An error was encountered, display and quit\n\t}\n\tvar output = solcSnapshot.compile(\"contract t { function g() {} }\", 1)\n})\n```\n\n### Linking Bytecode\n\nWhen using libraries, the resulting bytecode will contain placeholders for the real addresses of the referenced libraries. These have to be updated, via a process called linking, before deploying the contract.\n\nThe `linker` module (`require('solc/linker')`) offers helpers to accomplish this.\n\nThe `linkBytecode` method provides a simple helper for linking:\n\n```javascript\nvar linker = require('solc/linker')\n\nbytecode = linker.linkBytecode(bytecode, { 'MyLibrary': '0x123456...' })\n```\n\nAs of Solidity 0.4.11 the compiler supports [standard JSON input and output](https://solidity.readthedocs.io/en/develop/using-the-compiler.html#compiler-input-and-output-json-description) which outputs a *link references* map. This gives a map of library names to offsets in the bytecode to replace the addresses at. It also doesn't have the limitation on library file and contract name lengths.\n\nThere is a method available in the `linker` module called `findLinkReferences` which can find such link references in bytecode produced by an older compiler:\n\n```javascript\nvar linker = require('solc/linker')\n\nvar linkReferences = linker.findLinkReferences(bytecode)\n```\n\n### Updating the ABI\n\nThe ABI generated by Solidity versions can differ slightly, due to new features introduced.  There is a tool included which aims to translate the ABI generated by an older Solidity version to conform to the latest standard.\n\nIt can be used as:\n```javascript\nvar abi = require('solc/abi')\n\nvar inputABI = [{\"constant\":false,\"inputs\":[],\"name\":\"hello\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"}]\nvar outputABI = abi.update('0.3.6', inputABI)\n// Output contains: [{\"constant\":false,\"inputs\":[],\"name\":\"hello\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":true,\"type\":\"function\"},{\"type\":\"fallback\",\"payable\":true}]\n\n```\n\n### Formatting old JSON assembly output\n\nThere is a helper available to format old JSON assembly output into a text familiar to earlier users of Remix IDE.\n\n```\nvar translate = require('solc/translate')\n\n// assemblyJSON refers to the JSON of the given assembly and sourceCode is the source of which the assembly was generated from\nvar output = translate.prettyPrintLegacyAssemblyJSON(assemblyJSON, sourceCode)\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ethereum/solc-js.git"
  },
  "scripts": {
    "coverage": "istanbul cover node_modules/tape/bin/tape ./test/index.js",
    "coveralls": "npm run coverage && coveralls <coverage/lcov.info",
    "lint": "semistandard",
    "prepublish": "node downloadCurrentVersion.js && node verifyVersion.js",
    "pretest": "npm run lint",
    "test": "tape ./test/index.js"
  },
  "semistandard": {
    "ignore": [
      "soljson.js"
    ]
  },
  "version": "0.5.0"
}
